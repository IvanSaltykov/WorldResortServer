// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WorldResortServer.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Climate")
                        .HasColumnType("bit");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MineralWater")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PartWorldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TherapeuticMud")
                        .HasColumnType("bit");

                    b.Property<byte[]>("img")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("PartWorldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartWorldId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de000"),
                            Name = "Россия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de001"),
                            Name = "Китай",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de002"),
                            Name = "Индия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de003"),
                            Name = "Италия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de004"),
                            Name = "Испания",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de005"),
                            Name = "Канада",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47124")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de006"),
                            Name = "США",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47124")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de007"),
                            Name = "Бразилия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47124")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de008"),
                            Name = "Австралия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47123")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de009"),
                            Name = "Португалия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de010"),
                            Name = "Грузия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de011"),
                            Name = "Англия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de012"),
                            Name = "Япония",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de013"),
                            Name = "Германия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de014"),
                            Name = "Армения",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de015"),
                            Name = "Франция",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de016"),
                            Name = "Чили",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47124")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de017"),
                            Name = "Египет",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47122")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de018"),
                            Name = "Тунис",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47122")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de019"),
                            Name = "Марокко",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47122")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de020"),
                            Name = "ЮАР",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47122")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de021"),
                            Name = "Индонезия",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121")
                        },
                        new
                        {
                            Id = new Guid("d075f092-113c-487a-8d25-1da6f29de022"),
                            Name = "ОАЭ",
                            PartWorldId = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121")
                        });
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("int");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Models.FavouriteHotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FavoriteHotels");
                });

            modelBuilder.Entity("Entities.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<byte[]>("img")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Entities.Models.PartWorld", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("PartWorlds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47120"),
                            Name = "Европа"
                        },
                        new
                        {
                            Id = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47121"),
                            Name = "Азия"
                        },
                        new
                        {
                            Id = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47122"),
                            Name = "Африка"
                        },
                        new
                        {
                            Id = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47123"),
                            Name = "Австралия"
                        },
                        new
                        {
                            Id = new Guid("8daf4fdc-310b-4b7d-acf4-2f5291b47124"),
                            Name = "Америка"
                        });
                });

            modelBuilder.Entity("Entities.Models.TypeRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypeRooms");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8cb0aa55-f6c4-454c-93d1-5b32eaac35f1",
                            ConcurrencyStamp = "a68be5fa-72a3-447d-bbb7-d595728e28cd",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "81a341b9-2ceb-48d1-9c5e-4829061ebaa2",
                            ConcurrencyStamp = "be2f2dab-a22c-461f-96c7-520db9ae3b45",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.HasOne("Entities.Models.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.HasOne("Entities.Models.PartWorld", "PartWorld")
                        .WithMany("Countries")
                        .HasForeignKey("PartWorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartWorld");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entities.Models.PartWorld", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
